using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Client
{
    public class Client9
    {
        static int ServerPort = 1234;
        static Socket sck;
        static string name = "";
        static string msg = "";
        public static void Send()
        {
            while (true)
            {

                msg = Console.ReadLine();
                try
                {

                    byte[] sData = Encoding.Default.GetBytes(name + "#" + msg);
                    sck.Send(sData, 0, sData.Length, 0);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                }
            }
        }

        public static void Read()
        {

            while (true)
            {
                if (msg.Equals("logout"))
                    return;
                try
                {
                    // read the message sent to this client
                    byte[] Buffer = new byte[255];
                    int rec = sck.Receive(Buffer, 0, Buffer.Length, 0);
                    Array.Resize(ref Buffer, rec);
                    string dis = Encoding.Default.GetString(Buffer);
                    Console.WriteLine(dis);
                }
                catch (Exception e)
                {

                    Console.WriteLine(e);
                }
            }
        }

        static void Connection()
        {
            sck = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            Console.Write("Enter Name : ");
            name = Console.ReadLine();
            Console.WriteLine("Connecting.....");

            IPEndPoint ed = new IPEndPoint(IPAddress.Parse("127.0.0.1"), ServerPort);

            try
            {
                sck.Connect(ed);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            byte[] send = Encoding.Default.GetBytes(name);
            sck.Send(send, 0, send.Length, 0);
            byte[] Buf = new byte[255];
            int rec = sck.Receive(Buf, 0, Buf.Length, 0);
            Array.Resize(ref Buf, rec);
            string dis = Encoding.Default.GetString(Buf);
            Console.WriteLine(dis + " Connected.....");
            Console.Write("Enter Name U want To Connect '|':");
            string conn = Console.ReadLine();
            send = Encoding.Default.GetBytes(conn);
            sck.Send(send, 0, send.Length, 0);
        }


        static void Main(string[] args)
        {
            try
            {
                Connection();
                Thread sendMessage = new Thread(new ThreadStart(Send));
                Thread readMessage = new Thread(new ThreadStart(Read));

                sendMessage.Start();
                readMessage.Start();
            }
            catch (Exception ex)
            { Console.WriteLine(ex.Message); }
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Server
{


    public class Server9
    {


        static Dictionary<string, ClientHandler> dSockets = new Dictionary<string, ClientHandler>();
        static int i = 1;
        static Socket sck;
        static Socket acc;

        static void Connection()
        {
            sck = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            sck.Bind(new IPEndPoint(IPAddress.Parse("127.0.0.1"), 1234));
            sck.Listen(2);
        }

        static void Operation()
        {
            while (true)
            {
                // Accept the incoming request
                acc = sck.Accept();
                try
                {

                    byte[] Buf = new byte[255];
                    int rec = acc.Receive(Buf, 0, Buf.Length, 0);
                    Array.Resize(ref Buf, rec);
                    string dis = Encoding.Default.GetString(Buf);
                    Console.WriteLine(dis + " Joined.....");
                    byte[] send = Encoding.Default.GetBytes(dis);
                    acc.Send(send, 0, send.Length, 0);
                    byte[] Buf1 = new byte[255];
                    int rec1 = acc.Receive(Buf1, 0, Buf1.Length, 0);
                    Array.Resize(ref Buf1, rec1);
                    string dis1 = Encoding.Default.GetString(Buf1);

                    ClientHandler mtch = new ClientHandler(acc, dis, dis1, dSockets);
                    dSockets.Add(dis, mtch);

                    Thread t = new Thread(mtch.Run);
                    Thread t1 = new Thread(mtch.Send);
                    t.Start();
                    t1.Start();
                    i++;
                }
                catch
                {
                    Console.WriteLine("Hello");
                }
            }
        }

        static void Main(string[] args)
        {

            Console.WriteLine("WelCome To Chat Server");
            Connection();
            Operation();

        }

    }

    class ClientHandler
    {

        private string name;
        Socket s;
        bool isloggedin;
        string[] strr;
        static ClientHandler kk;
        Dictionary<string, ClientHandler> dSockets;


        public ClientHandler(Socket s, string name, string con, Dictionary<string, ClientHandler> ch)
        {

            this.name = name;
            this.s = s;
            this.isloggedin = true;
            dSockets = ch;
            this.strr = con.Split('|');
        }

        public void Run()
        {
            string received;
            while (true)
            {
                try
                {
                    byte[] Buffer = new byte[255];
                    int rec = s.Receive(Buffer, 0, Buffer.Length, 0);
                    Array.Resize(ref Buffer, rec);
                    received = Encoding.Default.GetString(Buffer);

                    Console.WriteLine(received);
                    string[] st = received.Split('#');
                    string recipient = st[0];
                    string MsgToSend = st[1];

                    if (MsgToSend.Equals("logout"))
                    {
                        dSockets.Remove(recipient);
                        this.isloggedin = false;
                        this.s.Close();
                        break;
                    }


                    foreach (KeyValuePair<string, ClientHandler> val in dSockets)
                    {
                        ClientHandler mc = (ClientHandler)val.Value;

                        if (mc.name.Equals(recipient))
                        {
                            kk = mc;
                        }
                        for (int i = 0; i < kk.strr.Length; i++)
                        {

                            if (!(mc.name.Equals(recipient)) && mc.isloggedin == true && mc.name.Equals(kk.strr[i]))
                            {
                                byte[] sData = Encoding.Default.GetBytes(this.name + " : " + MsgToSend);
                                mc.s.Send(sData, 0, sData.Length, 0);
                                break;
                            }
                        }
                    }


                }
                catch (Exception e)
                {

                    Console.WriteLine(e.Message);
                }
            }
        }

        public void Send()
        {
            if (s != null)
            {
                while (true)
                {
                    string msg = Console.ReadLine();
                    foreach (KeyValuePair<string, ClientHandler> val in dSockets)
                    {
                        ClientHandler mc = (ClientHandler)val.Value;
                        byte[] sData = Encoding.Default.GetBytes("Server : " + msg);
                        mc.s.Send(sData, 0, sData.Length, 0);
                    }


                }
            }
        }
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------
===============================================================================================================================================
===============================================================================================================================================
===============================================================================================================================================
===============================================================================================================================================
===============================================================================================================================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

namespace Client
{
    class Client10
    {

        static void Main(string[] args)
        {
            Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            //Console.Write("Enter IP address : ");
            IPEndPoint iPe = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 9090);
            Console.Write("Enter your name : ");
            string str = Console.ReadLine();
            try
            {
                socket.Connect(iPe);
                Parallel.Invoke(() => RecieveFromServer(socket), () => send(socket, str));
               
            }
            catch (Exception ex)
            {
                Console.WriteLine("Connection are not established...");
            }

         //   Parallel.Invoke(() => RecieveFromServer(socket), ()=> send(socket));
            
        }
        public static void send(Socket socket, string str)
        {
            byte[] data = Encoding.ASCII.GetBytes(str);
            socket.Send(data);
            byte[] bt = new byte[255];

           
            while (true)
            {

                string s1 = str + (" : " + Console.ReadLine());
                byte[] br = Encoding.ASCII.GetBytes(s1);
                socket.Send(br);
            }
        }
        public static void RecieveFromServer(Socket socket)
        {
            byte[] buffer = new byte[socket.SendBufferSize];
            while (true)
            {
                int length = socket.Receive(buffer);
                byte[] br1 = new byte[length];
                Array.Copy(buffer, br1, length);
                Console.WriteLine("Server : " + Encoding.ASCII.GetString(br1));
            }

        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

namespace Server
{
    class Server10
    {
        static void Main(string[] args)
        {
            Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            IPEndPoint iPEnd = new IPEndPoint(IPAddress.Any, 9090);
            socket.Bind(iPEnd);
            socket.Listen(10);
            Console.WriteLine("Welcome to Chat Server");
            Dictionary<int, Socket> buffers = new Dictionary<int, Socket>();
            int count = 0;
            while (true)
            {
                count++;
                Socket acc = socket.Accept();
                

                byte[] bt = new byte[255];
                int l = acc.Receive(bt, 0, bt.Length, 0);
                Array.Resize(ref bt, l);
                Console.Write(Encoding.Default.GetString(bt) + " : ");
                Console.WriteLine("Connected...");

                byte[] con = Encoding.Default.GetBytes("Connection Successfull");
                acc.Send(con, 0, con.Length, 0);
                byte[] buffer = new byte[acc.SendBufferSize];
                buffers.Add(count, acc);

                Task t1 = new Task(() => SendToClient(buffers));
                t1.Start();
                Task t2 = new Task(() => RecieveFromClient(acc, buffer));
                t2.Start();
            }
        }
        public static void RecieveFromClient(Socket acc, byte[] buffer)
        {
            string str = "";
            int length;
            do
            {
                length = acc.Receive(buffer);
                byte[] br = new byte[length];
                Array.Copy(buffer, br, length);
                str = Encoding.ASCII.GetString(br);
                Console.WriteLine(str);


            } while (length > 0);
        }
        public static void SendToClient(Dictionary<int, Socket> buffers)
        {
            while (true)
            {
                string s1 = Console.ReadLine();
                foreach (KeyValuePair<int, Socket> kv in buffers)
                {
                    Socket socket = kv.Value;
                    byte[] send = Encoding.ASCII.GetBytes(s1);
                    socket.Send(send);
                }

            }
        }
    }
}